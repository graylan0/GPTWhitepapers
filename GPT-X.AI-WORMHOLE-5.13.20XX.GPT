import math

def wormhole(x, y, z):
    '''
    This function will calculate the coordinates of a wormhole in 3D space.
    Inputs:
    x, y, z - the initial coordinates
    Output:
    newX, newY, newZ - the coordinates after passing through the wormhole
    '''
    # Calculate the distance from the origin
    r = math.sqrt(x**2 + y**2 + z**2)
    
    # Calculate the angle between the vector and the z-axis
    theta = math.acos(z/r)
    
    # Calculate the new coordinates
    newX = r * math.sin(theta) * math.cos(theta)
    newY = r * math.sin(theta) * math.sin(theta)
    newZ = r * math.cos(theta)
    
    return newX, newY, newZ

def distance_traveled(x1, y1, z1, x2, y2, z2):
    '''
    This function will calculate the distance traveled through the wormhole.
    Inputs:
    x1, y1, z1 - the initial coordinates
    x2, y2, z2 - the final coordinates
    Output:
    distance - the distance traveled
    '''
    # Calculate the distance
    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2)
    
    return distance

# Test the functions
x, y, z = 1, 2, 3
newX, newY, newZ = wormhole(x, y, z)
distance = distance_traveled(x, y, z, newX, newY, newZ)

print(f"Initial coordinates: ({x}, {y}, {z})")
print(f"Final coordinates: ({newX}, {newY}, {newZ})")
print(f"Distance traveled: {distance}")
